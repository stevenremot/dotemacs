#+title: Emacs initialization
#+startup: overview

* Base configuration

  I put in this part configurations related to Emacs use in general.

** Global variables

   #+begin_src emacs-lisp
     (defvar personalconf--basedir (file-name-directory load-file-name))
     (defvar personalconf--custom-lisp-dir (concat personalconf--basedir "site-lisp/"))
     (defvar personalconf--custom-conf (concat personalconf--basedir "custom-configuration.el"))
     (defvar personalconf--local-init-file (concat personalconf--basedir "init-local.el"))
     (defvar personalconf--authinfo-file (concat personalconf--basedir ".authinfo.gpg"))
   #+end_src

** Custom file
   #+begin_src emacs-lisp
     (setq custom-file personalconf--custom-conf)
     (load-file personalconf--custom-conf)
   #+end_src

** Custom lisp loading
   #+begin_src emacs-lisp
     (add-to-list 'load-path personalconf--custom-lisp-dir)
   #+end_src

** Package
   Installing repositories

   #+begin_src emacs-lisp
     (require 'package)

     (when (< emacs-major-version 24)
       (add-to-list 'package-archives
                    '("gnu" .
                      "http://elpa.gnu.org/packages/")))

     (add-to-list 'package-archives
                  '("marmalade" .
                    "http://marmalade-repo.org/packages/"))
     (add-to-list 'package-archives
                  '("melpa" .
                    "http://melpa.milkbox.net/packages/"))

     (package-initialize)
   #+end_src

** Theme

*** Colors

   #+begin_src emacs-lisp
     (load-theme 'solarized-dark t)
   #+end_src

*** Mode line

    I use powerline for mode line customization. My theme is derived
    from powerline default theme.

    #+begin_src emacs-lisp
      (when (package-installed-p 'powerline)
        (defun powerline-personal-theme ()
          "setup the default mode-line."
          (interactive)
          (setq-default mode-line-format
                        '("%e"
                          (:eval
                           (let* ((active (powerline-selected-window-active))
                                  (mode-line (if active 'mode-line 'mode-line-inactive))
                                  (face1 (if active 'powerline-active1 'powerline-inactive1))
                                  (face2 (if active 'powerline-active2 'powerline-inactive2))
                                  (separator-left (intern (format "powerline-%s-%s"
                                                                  powerline-default-separator
                                                                  (car powerline-default-separator-dir))))
                                  (separator-right (intern (format "powerline-%s-%s"
                                                                   powerline-default-separator
                                                                   (cdr powerline-default-separator-dir))))
                                  (lhs (list (powerline-raw "%*" nil 'l)
                                             (powerline-buffer-size nil 'l)
                                             (powerline-raw mode-line-mule-info nil 'l)
                                             (powerline-buffer-id nil 'l)
                                             (when (and (boundp 'which-func-mode) which-func-mode)
                                               (powerline-raw which-func-format nil 'l))
                                             (powerline-raw " ")
                                             (funcall separator-left mode-line face1)
                                             (when (boundp 'erc-modified-channels-object)
                                               (powerline-raw erc-modified-channels-object face1 'l))
                                             ;; Lines
                                             (powerline-raw "%4l" face1 'l)
                                             (powerline-raw ":" face1 'l)
                                             (powerline-raw "%3c" face1 'r)
                                             ;; End lines
                                             (powerline-narrow face1 'l)
                                             (powerline-raw " " face1)
                                             (funcall separator-left face1 face2)
                                             (powerline-vc face2 'r)))
                                  (rhs (list (powerline-raw global-mode-string face2 'r)
                                             (funcall separator-right face2 face1)
                                             ;; Modes
                                             (powerline-major-mode face1 'l)
                                             (powerline-process face1)
                                             (powerline-minor-modes face1 'l)
                                             ;; End modes
                                             (funcall separator-right face1 mode-line)
                                             (powerline-raw " ")
                                             (powerline-raw "%6p" nil 'r)
                                             (powerline-hud face2 face1))))
                             (concat (powerline-render lhs)
                                     (powerline-fill face2 (powerline-width rhs))
                                     (powerline-render rhs)))))))
        (powerline-personal-theme))
    #+end_src


** General shortcuts

   #+begin_src emacs-lisp
     (global-set-key (kbd "C-s-t") (lambda () (interactive) (eshell t)))
     (global-set-key (kbd "C-s-s") 'speedbar)
   #+end_src

** Convenience features

   Activating some convenience features.

   - *uniquify* reduce collision between buffer names
   - I don't like toolbar
   - *ido-mode* is a nice feature, though I replace it with helm on some places

   #+begin_src emacs-lisp
     (require 'uniquify)
     (when window-system
       (tool-bar-mode -1)
       (menu-bar-mode -1))
     (ido-mode 1)
   #+end_src
** Helm

   #+begin_src emacs-lisp
     (when (package-installed-p 'helm)
       (require 'helm)
       (global-set-key (kbd "M-x") 'helm-M-x)
       (global-set-key (kbd "C-x C-f") 'helm-find-files)
       (global-set-key (kbd "C-x b") 'helm-buffers-list)
       (global-set-key (kbd "C-x C-b") 'helm-buffers-list))
   #+end_src

** Keyboard macros

   Cette macro permet d'avoir une liste des packages qui vont être
   installés.

   #+begin_src emacs-lisp
     (fset 'perso-show-installed-packages
           (lambda (&optional arg)
             "Show installed packages."
             (interactive "p")
             (kmacro-exec-ring-item
              (quote ([134217843 111 dead-circumflex 32 73 return] 0 "%d")) arg)))

     (eval-after-load 'package
       '(define-key package-menu-mode-map
          (kbd "C-c s")
          'perso-show-installed-packages))
   #+end_src

* Development

  I put in this part all configuration related to programming modes
  and text-editing.

** Base editing features

   Base settings for programming modes

   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq-default tab-width 4)
     (show-paren-mode 1)

     (column-number-mode 1)
     (add-hook 'before-save-hook 'delete-trailing-whitespace)

     ;; In order to make dead-circumflex work on emacs 24
     (when (>= emacs-major-version 24)
       (require 'iso-transl))
   #+end_src

** EDE

   I use an newer EDE version with more features.

*** Bootstrapping

   #+begin_src emacs-lisp
     (load-file (concat personalconf--custom-lisp-dir "cedet-1.1/common/cedet.el"))
     (global-ede-mode 1)

     (semantic-load-enable-gaudy-code-helpers)
     (semantic-load-enable-all-exuberent-ctags-support)
   #+end_src

*** Shortcuts

    #+begin_src emacs-lisp
      (global-set-key (kbd "C-s-<SPC>") 'semantic-ia-complete-symbol-menu)
      (global-set-key (kbd "C-s-<return>") 'semantic-ia-fast-jump)
    #+end_src

** Flymake / flycheck

*** Path settings

   It is necesary to include the system environment's path into emacs path in order
   for flycheck to work on Emacs Lisp files.

   #+begin_src emacs-lisp
     (require 'exec-path-from-shell)
     (exec-path-from-shell-initialize)
   #+end_src

*** Bootstrap

    #+begin_src emacs-lisp
      (if (require 'flycheck nil :no-error)
          (add-hook 'after-init-hook #'global-flycheck-mode)
          (add-hook 'find-file-hook 'flymake-find-file-hook))

      (add-hook 'php-mode-hook 'flymake-phpmd-setup)
    #+end_src

*** Shortcuts

    #+begin_src emacs-lisp
      (global-set-key (kbd "C-M-d") 'flymake-display-err-menu-for-current-line)
    #+end_src

** Auto-completion

*** Auto-complete

    Auto-complete is disabled, I use company instead.

    #+begin_src emacs-lisp :tangle no :exports none
      (require 'auto-complete)
      (add-to-list 'ac-modes 'php-mode)
      (add-to-list 'ac-modes 'js-mode)
      (global-auto-complete-mode t)
    #+end_src

*** Company

    #+begin_src emacs-lisp
     (when (package-installed-p 'company)
       (require 'company)
       (defvar company-backends)

       (when (package-installed-p 'company-tern)
         (add-to-list 'company-backends 'company-tern))
       (add-hook 'after-init-hook 'global-company-mode))
    #+end_src

** Projectile

   #+begin_src emacs-lisp
    (when (require 'projectile nil :no-error)
      (projectile-global-mode 1))
   #+end_src
** Eldoc

   #+begin_src emacs-lisp
    (when (package-installed-p 'eldoc)
      (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
      (add-hook 'lisp-interaction-mode-hook 'eldoc-mode)
      (add-hook 'php-mode-hook 'eldoc-mode))
   #+end_src

** Tern

*** Bootstrap

   #+begin_src emacs-lisp
     (add-hook 'js-mode-hook (lambda ()
                                (when (package-installed-p 'tern)
                                  (tern-mode t))))
   #+end_src


***  Auto-complete

     Disabled in favor of company

     #+begin_src emacs-lisp :tangle no :exports none
       (eval-after-load 'tern
         '(progn
            (require 'tern-auto-complete)
            (tern-ac-setup)))
     #+end_src

*** Company

    #+begin_src emacs-lisp
      (when (package-installed-p 'company-tern)
        (add-hook 'js-mode-hook (lambda ()
                                  (company-tern t))))
    #+end_src
** Gulp

   Loading a personal gulp script (that should be completed and published one day).

   #+begin_src emacs-lisp
     (add-to-list 'load-path (concat personalconf--custom-lisp-dir "gulpjs/"))
     (autoload 'gulpjs-start-task "gulpjs" "Start a gulp task." t)
   #+end_src

** TSS

    #+begin_src emacs-lisp
      (add-to-list 'load-path (concat personalconf--custom-lisp-dir "/emacs-tss"))

      (when (require 'tss nil :noerror)
        (defvar tss-popup-help-key)
        (defvar tss-jump-to-definition-key)
        (defvar tss-ac-trigger-command-keys)


        (require 'typescript)
        (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))

        ;; Key bindings
        (setq tss-popup-help-key "C-:")
        (setq tss-jump-to-definition-key "C->")

        (add-to-list 'tss-ac-trigger-command-keys "=")
        (tss-config-default))
    #+end_src

** Web mode

   #+begin_src emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.html\\.phtml\\'" . web-mode))
   #+end_src

** Lisp
*** Emacs Lisp development

     A shortcut for eval buffer, and I can't remember what the load path is for...

    #+begin_src emacs-lisp
     (defvar flycheck-emacs-lisp-load-path)

     (add-hook 'emacs-lisp-mode-hook (lambda ()
                                       (setq flycheck-emacs-lisp-load-path load-path)
                                       (local-set-key (kbd "C-c C-b") 'eval-buffer)))
    #+end_src

*** Paredit

    #+begin_src emacs-lisp
      (when (package-installed-p 'paredit)
        (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
        (add-hook 'lisp-interaction-mode-hook 'paredit-mode)
        (add-hook 'clojure-mode-hook 'paredit-mode))
    #+end_src
** PlantUML

   This sets up plantuml-mode :

   #+begin_src emacs-lisp
     (eval-after-load 'plantuml-mode
       (setq plantuml-jar-path (concat personalconf--basedir "programs/plantuml.jar")))
   #+end_src

** TLSD

   Setup templates and special functions for TLSD development.

   #+begin_src emacs-lisp
     (global-srecode-minor-mode 1)

     (defun tlsd-start-header ()
       "Insert the base content for a TLSD header."
       (interactive)
       (c++-mode)
       (srecode-insert "file:tlsd-header-base"))
   #+end_src

** Haskell

   Haskell mode configuration

   #+begin_src emacs-lisp
     (when (package-installed-p 'haskell-mode)
       (add-hook 'haskell-mode-hook 'haskell-indentation-mode))
   #+end_src

* Mailing

  I put in this part all configuration related to mailing, and
  communication in general.

** Gnus

   I use mu4e and elfeed now, so this section is disabled.

   #+begin_src emacs-lisp :tangle no :exports none
     (require 'epa-file)
     (epa-file-enable)

     (eval-after-load 'gnus '(progn
                               (defvar gnus-select-method)
                               (defvar gnus-secondary-select-methods)
                               (defvar gnus-posting-styles)

                               (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)

                               (setq gnus-select-method
                                     '(nnimap "perso"
                                              (nnimap-address "imap.gmail.com")
                                              (nnimap-authinfo-file ,personalconf--authinfo-file)))
                               (setq gnus-secondary-select-methods
                                     `((nnimap "telecom"
                                               (nnimap-address "z.mines-telecom.fr")
                                               (nnimap-authinfo-file ,personalconf--authinfo-file))
                                       (nnimap "inovia"
                                               (nnimap-address "imap.gmail.com")
                                               (nnimap-authinfo-file ,personalconf--authinfo-file))
                                       (nnrss "http://planet.lisp.org/rss20.xml")
                                       (nnrss "http://celeron.55.lt/blog/?feed=rss2")))
                               (setq gnus-posting-styles
                                     '((".*"
                                        (name "Steven Rémot"))
                                       ("perso"
                                        (address "steven.remot@gmail.com"))
                                       ("telecom"
                                        (address "steven.remot@telecom-paristech.fr"))
                                       ("inovia"
                                        (address "steven.remot@inovia-team.com"))))))
   #+end_src

** BBDB

   Mu4e Handles contacts correctly, so this section is disabled.

   #+begin_src emacs-lisp :tangle no :exports none
     (when (require 'bbdb nil :no-error)
       (defvar gnus-summary-mode-map)
       (defvar bbdb-message-all-addresses)

       (bbdb-initialize 'gnus 'message)
       ;; (bbdb-mua-auto-update-init 'gnus 'message)

       ;; (add-hook 'message-mode-hook (lambda ()
       ;; (local-set-key (kbd "C-c ;") 'bbdb-complete-name)))
       )
   #+end_src

** Mu4e

   #+begin_src emacs-lisp
     (require 'mu4e-init)
   #+end_src

* Enabled features

  #+begin_src emacs-lisp
    (put 'erase-buffer 'disabled nil)
  #+end_src

* Local configuration loading

  This configuration is not under version control. IT allows machine-specific
  configuration.

  #+begin_src emacs-lisp
    (when (file-exists-p personalconf--local-init-file)
      (load-file personalconf--local-init-file))
  #+end_src

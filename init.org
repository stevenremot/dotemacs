#+TITLE: Emacs configuration
#+PROPERTY: header-args :tangle ./init.el

* Introduction
  :PROPERTIES:
  :tangle:   no
  :END:

  Here is the source of my Emacs configuration. Create the files by
  running ~org-babel-tangle~ (~C-c C-v t)~ in this file.

* Package management
** Initialiaze package

   I want to download packages from [[https://melpa.org/][MELPA]] and [[http://stable.melpa.org/#/][MELPA stable]] too

   #+BEGIN_SRC emacs-lisp
     (require 'package)

     (add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t)
     (add-to-list 'package-archives (cons "melpa-stable" "https://stable.melpa.org/packages/") t)
   #+END_SRC

   The only remaining thing to do is initializing the package manager

   #+BEGIN_SRC emacs-lisp
     (package-initialize)
   #+END_SRC

** use-package

   All my configuration is based on [[https://github.com/jwiegley/use-package][use-package]] and [[https://github.com/quelpa/quelpa][quelpa]]. These
   packages have to be initialized  at the very beginning.

   #+BEGIN_SRC emacs-lisp
     (let ((packages-to-install '(use-package quelpa-use-package)))
       (dolist (package packages-to-install)
         (unless (package-installed-p package)
           (package-refresh-contents)
           (package-install package))))
   #+END_SRC

   Always install a package declare with ~use-package~ if it's not
   installed:

   #+BEGIN_SRC emacs-lisp
   (setq use-package-always-ensure t)
   #+END_SRC

   Additionally, we will require ~quelpa-use-package~ right now so
   that we don't have to care about that later.

   #+BEGIN_SRC emacs-lisp
     (require 'quelpa-use-package)
   #+END_SRC

** Backups

   elpa-backup is a personal package located at [[file:site-lisp/elpa-backup.el][site-lisp/elpa-backup.el]]

   It has 2 commands:
   - ~elpa-backup-do~, to create a snapshot of the ~elpa~ directory
   - ~elpa-backup-rollback~, to replace the current ~elpa~ directory
     with the snapshot

   Running ~elpa-backup-do~ before an update ensures I can come back
   to a working state if something goes wrong.

   #+BEGIN_SRC emacs-lisp
     (use-package elpa-backup
       :ensure nil
       :commands (elpa-backup-do elpa-backup-rollback))
   #+END_SRC

* Theme
** Default settings

   Remove GUI garbage and increase the font size.

   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode 0)
     (scroll-bar-mode 0)
     (menu-bar-mode 0)
     (set-face-attribute 'default nil :height 140 :family "Source code pro")
   #+END_SRC

** Challenger deep theme
   :PROPERTIES:
   :header-args:emacs-lisp: :tangle no
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package challenger-deep-theme
       :ensure t
       :config (load-theme 'challenger-deep))
   #+END_SRC
** Moe theme

   #+BEGIN_SRC emacs-lisp
     (use-package moe-theme
       :ensure t
       :config
       (moe-dark)
       (set-face-attribute 'default nil :height 140 :family "Source code pro")
       (with-eval-after-load 'ivy
	 (set-face-attribute 'ivy-current-match nil :foreground "white smoke")))
   #+END_SRC

** Mode line flycheck reporting

   This is a simple widget to show flycheck errors and warnings in the
   mode line.

   #+BEGIN_SRC emacs-lisp
     (defface my-flycheck-mode-line-font
       '((t :foreground "white" :height 120))
       "Base face for showing flycheck errors adn warnings in the mode line."
       :group 'mode-line)

     (defface my-flycheck-mode-line-error-disabled
       '((t :inherit my-flycheck-mode-line-font :background "dark red"))
       "Face for showing no flycheck errors in the mode line."
       :group 'mode-line)

     (defface my-flycheck-mode-line-error
       '((t :inherit my-flycheck-mode-line-font :background "red"))
       "Face for showing flycheck errors in the mode line."
       :group 'mode-line)

     (defface my-flycheck-mode-line-warning-disabled
       '((t :inherit my-flycheck-mode-line-font :background "OrangeRed4" ))
       "Face for showing no flycheck warnings in the mode line."
       :group 'mode-line)

     (defface my-flycheck-mode-line-warning
       '((t :inherit my-flycheck-mode-line-font :background "OrangeRed1" ))
       "Face for showing flycheck warnings in the mode line."
       :group 'mode-line)



     (defun my-flycheck-get-error-count ()
       "Return the number of flycheck errors by level."
       (interactive)
       (let ((errors flycheck-current-errors)
	     (count-by-level '()))
	 (cl-loop for error in errors
		  for level = (flycheck-error-level error)
		  for new-value = (1+ (or (plist-get count-by-level level) 0))
		  do
		  (setq count-by-level
			(plist-put count-by-level level new-value))
		  finally return count-by-level)))

     (defun my-flycheck-mode-line ()
       "Create a mode line element to display flycheck errors."
       (let* ((error-count (my-flycheck-get-error-count))
	      (errors (or (plist-get error-count 'error) 0))
	      (warnings (or (plist-get error-count 'warning) 0)))
	 (concat
	  (propertize (format " ❎ %d " errors)
		      'face (if (= 0 errors)
				'my-flycheck-mode-line-error-disabled
			      'my-flycheck-mode-line-error))
	  (propertize (format " ⚠ %d " warnings)
		      'face(if (= 0 warnings)
				'my-flycheck-mode-line-warning-disabled
			      'my-flycheck-mode-line-warning)))))
   #+END_SRC

** Powerline

   I am using my own theme forked from ~powerline-default-theme~.

   #+BEGIN_SRC emacs-lisp
     (defun my-powerline-theme ()
       "Setup the default mode-line."
       (interactive)
       (setq-default mode-line-format
		     '("%e"
		       (:eval
			(let* ((active (powerline-selected-window-active))
			       (mode-line-buffer-id (if active 'mode-line-buffer-id 'mode-line-buffer-id-inactive))
			       (mode-line (if active 'mode-line 'mode-line-inactive))
			       (face0 (if active 'powerline-active0 'powerline-inactive0))
			       (face1 (if active 'powerline-active1 'powerline-inactive1))
			       (face2 (if active 'powerline-active2 'powerline-inactive2))
			       (separator-left (intern (format "powerline-%s-%s"
							       (powerline-current-separator)
							       (car powerline-default-separator-dir))))
			       (separator-right (intern (format "powerline-%s-%s"
								(powerline-current-separator)
								(cdr powerline-default-separator-dir))))
			       (lhs (list (powerline-raw "%*" face0 'l)
					  (when powerline-display-buffer-size
					    (powerline-buffer-size face0 'l))
					  (when powerline-display-mule-info
					    (powerline-raw mode-line-mule-info face0 'l))
					  (powerline-buffer-id `(mode-line-buffer-id ,face0) 'l)
					  (powerline-raw " " face0)
					  (funcall separator-left face0 face1)
					  (powerline-major-mode face1 'l)
					  (powerline-process face1)
					  (powerline-minor-modes face1 'l)
					  (powerline-narrow face1 'l)
					  (powerline-raw " " face1)
					  (funcall separator-left face1 face2)
					  (my-flycheck-mode-line)
					  (powerline-vc face2 'r)
					  ))
			       (rhs (list (powerline-raw global-mode-string face2 'r)
					  (funcall separator-right face2 face1)
					  (unless window-system
					    (powerline-raw (char-to-string #xe0a1) face1 'l))
					  (powerline-raw "%4l" face1 'l)
					  (powerline-raw ":" face1 'l)
					  (powerline-raw "%3c" face1 'r)
					  (funcall separator-right face1 face0)
					  (powerline-raw " " face0)
					  (powerline-raw "%6p" face0 'r)
					  (powerline-fill face0 0)
					  )))
			  (concat (powerline-render lhs)
				  (powerline-fill face2 (powerline-width rhs))
				  (powerline-render rhs)))))))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package powerline
       :ensure
       :init
       (setq powerline-default-separator 'bar
	     powerline-display-hud nil)
       (my-powerline-theme))
   #+END_SRC

** Minor modes cleaning

   #+BEGIN_SRC emacs-lisp
     (use-package dim
       :ensure
       :init
       (dim-minor-names
	'((projectile-mode "" projectile)
	  (editorconfig-mode "" editorconfig)
	  (company-mode "" company)
	  (counsel-mode "" counsel)
	  (ivy-mode "" ivy)
	  (paredit-mode "" paredit)
	  (page-break-lines-mode "" page-break-lines)
	  (eldoc-mode "" eldoc)
	  (flycheck-mode "" flycheck))))
   #+END_SRC

* Main script
** Inhibit package-innitialize
   Add a commented call to ~package-initialize~ to inhibit it. We will
   do the call by hand later.

   #+BEGIN_SRC emacs-lisp
     ; (package-initialize)
   #+END_SRC

** Global variables

   These are commonn useful variables for getting the emacs init dir
   and the path to my personal local packages.

   #+BEGIN_SRC emacs-lisp
     (defconst my-init-dir (file-name-directory (or load-file-name (buffer-file-name))))
     (defconst my-site-lisp (concat my-init-dir "site-lisp/"))
   #+END_SRC

   ~my-site-lisp~ should be added to ~load-path~ as it contains packages.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path my-site-lisp)
   #+END_SRC

** Custom configuration

   Move the custom configurationn file outside of the init file to
   avoid blending custom configuration with the init sources.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (concat my-init-dir "custom-file.el"))
     (load custom-file 'no-error)
   #+END_SRC

** Load the initialization modules

   Load the sources present in the init/ directory:

   #+NAME: init-modules
   - exec-path-from-shell
   - prompt
   - ivy
   - shell
   - ag
   - editing
   - git
   - auto-completion
   - code-checking
   - rocktl
   - emacs-lisp
   - web
   - cucumber

   #+BEGIN_SRC emacs-lisp :var modules=init-modules
     (defun my-load-init-file (file)
       "Load one initialization file.

     FILE is the name of the file without extension and directory."
       (load (concat my-init-dir "init/" (if (listp file) (car file) file) ".el")))

     (mapc #'my-load-init-file modules)
   #+END_SRC
* Editing
** Rainbow parentheses

   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :hook (prog-mode . rainbow-delimiters-mode))
   #+END_SRC

* Navigation
** imenu

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c i") #'imenu)
   #+END_SRC
** neotree

   Package for seeing a file hierarchy as a file tree.

   In order for our selected theme to work, we have to load ~all-the-icons~;

   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :ensure)
   #+END_SRC

   Then we can setup neotree with the right theme.

   #+BEGIN_SRC emacs-lisp
     (use-package neotree
       :ensure
       :custom
       (neo-theme 'icons)
       ; Try to select the current file at opening
       (neo-smart-open t))
   #+END_SRC

   #+RESULTS:
* Project management
** Projectile

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure
       :custom
       (projectile-keymap-prefix (kbd "C-c p"))
       :init (projectile-mode))

     (use-package counsel-projectile
       :ensure
       :after (projectile ivy)
       :init (counsel-projectile-mode))
   #+END_SRC

* Org mode
** Basic configuration
*** Clock table indentation

    The org clock table indents its entries using the LateX symbol
    ~\emsp~, which renders badly in org buffers. I override it with my
    own indent function extracted from [[https://emacs.stackexchange.com/questions/9528/is-it-possible-to-remove-emsp-from-clock-report-but-preserve-indentation][a stackexchange discussion]].

    #+BEGIN_SRC emacs-lisp
      (defun my/org-clocktable-indent-string (level)
        (if (= level 1)
            ""
          (let ((str "+"))
            (while (> level 2)
              (setq level (1- level)
                    str (concat str "--")))
            (concat str "-> "))))
    #+END_SRC

*** Org initialization

    #+BEGIN_SRC emacs-lisp
      (defun my/init-org ()
	;; Override clock table ident function with mine
	(advice-add 'org-clocktable-indent-string :override #'my/org-clocktable-indent-string)

	;; Automatically add syntax coloration on org src blocks
	(setq org-src-fontify-natively t)
	(org-babel-do-load-languages 'org-babel-load-languages
				     '((shell . t)
				       (sql . t))))

    #+END_SRC

*** Package declaration

   #+BEGIN_SRC emacs-lisp
     (use-package org
       :bind (("C-c o t" . org-todo-list))
       :init (my/init-org))
   #+END_SRC

** Agenda

   #+BEGIN_SRC emacs-lisp
     (use-package org-agenda
       :ensure nil
       :bind (("C-c o a" . org-agenda-list)))
   #+END_SRC

** Clock

   #+BEGIN_SRC emacs-lisp
     (use-package org-clock
       :ensure nil
       :bind (("C-c o j" . org-clock-jump-to-current-clock)))
   #+END_SRC

** Capture

   #+BEGIN_SRC emacs-lisp
     (use-package org-capture
       :ensure nil
       :bind (("C-c o c" . org-capture)))
   #+END_SRC

** Async

   #+BEGIN_SRC emacs-lisp
     (use-package ob-async
       :ensure
       :after (org))
   #+END_SRC

** Issue opening

   Use the package ~org-open-ref~ in order to easily open the redmine
   and gitlab issues.

   #+BEGIN_SRC emacs-lisp
     (use-package org-tracker
       :ensure nil
       :bind (("C-c r j" . org-tracker-open-issue-at-point)
	      ("C-c r J" . org-tracker-open-current-issue)
	      ("C-c r t" . org-tracker-track-time-at-point)))
   #+END_SRC

* LSP

  Setup the core package

  #+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
      :ensure
      :commands lsp
      :init (setq lsp-prefer-flymake nil))
  #+END_SRC

  Setup ~lsp-ui~ and ~company~:

  #+BEGIN_SRC emacs-lisp
    (use-package lsp-ui
      :ensure
      :commands lsp-ui-mode)

    (use-package company-lsp
      :ensure
      :commands company-lsp)
  #+END_SRC

* Javascript

** Node modules support

   ~add-node-modules-path~ automatically adds the node_modules bin
   folder to the path. This allows using the project tools when
   opening a file (ex: eslint, prettier).

   #+BEGIN_SRC emacs-lisp
     (use-package add-node-modules-path
       :ensure
       :hook ((js-mode . add-node-modules-path)
	      (typescript-mode . add-node-modules-path)))
   #+END_SRC
** LSP

   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :hook ((js-mode . lsp)))
   #+END_SRC

** Typescript

   Setup the basic typescript-mode:

   #+BEGIN_SRC emacs-lisp
     (use-package typescript-mode
       :mode "\\.tsx?\\'"
       :config (flycheck-add-mode 'javascript-eslint 'typescript-mode))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :hook (typescript-mode . lsp)
       :config (flycheck-add-next-checker 'lsp-ui 'javascript-eslint))
   #+END_SRC

** JSON

   #+BEGIN_SRC emacs-lisp
     (use-package json-mode
       :ensure)
   #+END_SRC

** NVM

   Setup the correct node version when opening a JS file.

   #+BEGIN_SRC emacs-lisp
     (defun my-nvm-use-for ()
       (interactive)
       (condition-case error
	   (nvm-use-for-buffer)))

     (use-package nvm
       :ensure
       :hook ((js-mode json-mode typescript-mode dired-mode magit-mode) . my-nvm-use-for))
   #+END_SRC

** Swagger

   Setup a custom command to be able to edit yaml in multi-line comments.

   #+BEGIN_SRC emacs-lisp
     (use-package yaml-comment
       :ensure nil
       :after (typescript-mode)
       :bind (:map js-mode-map
	      ("C-c y" . yaml-comment-edit-at-point)
	      :map typescript-mode-map
	      ("C-c y" . yaml-comment-edit-at-point)))
   #+END_SRC

** Indium

   #+BEGIN_SRC emacs-lisp
     (use-package indium
       :hook ((js-mode . indium-interaction-mode)
	      (typescript-mode . indium-interaction-mode)))
   #+END_SRC

* PHP
** php-mode

   #+BEGIN_SRC emacs-lisp
     (use-package php-mode
       :ensure
       :mode "\\.php\\'")
   #+END_SRC

** lsp-php

   This package requires [[https://github.com/felixfbecker/php-language-server][php-language-server]] to work. Follow the
   instructions on the readme to do so.

   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :hook ((php-mode . lsp)))
   #+END_SRC
* Docker

** dockerfile-mode

   #+BEGIN_SRC emacs-lisp
     (use-package dockerfile-mode
       :ensure)
   #+END_SRC

** docker

   #+BEGIN_SRC emacs-lisp
     (use-package docker
       :ensure)
   #+END_SRC
* Ocaml / Reason
** Tuareg

   This is the major mode to edit Ocaml buffers.

   #+BEGIN_SRC emacs-lisp
     (use-package tuareg
       :ensure
       :mode ("\\.ml\\'" . tuareg-mode))
   #+END_SRC

** Reason mode

   ~reason-mode~ has a nice auto-formatting feature we can trigger
   before saving a buffer.

   #+BEGIN_SRC emacs-lisp
     (defun init/setup-reason-buffer ()
       "Setup a buffer for working with reason."
       (add-hook 'before-save-hook #'refmt-before-save))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package reason-mode
       :ensure
       :hook ((reason-mode . init/setup-reason-buffer))
       :mode ("\\.re\\'" . reason-mode))
   #+END_SRC

** LSP

   This package requires [[https://github.com/jaredly/reason-language-server][reason-language-server]] to be installed
   somewhere.

   #+BEGIN_SRC emacs-lisp
     (use-package lsp-reason
       :ensure nil
       :hook (reason-mode . lsp-reason-enable))
   #+END_SRC

* Markdown

  #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
      :ensure)
  #+END_SRC

* YAML

  #+BEGIN_SRC emacs-lisp
    (use-package yaml-mode
      :ensure)
  #+END_SRC

* Android
** Groovy

   This is useful for editing gradle files.

   #+BEGIN_SRC emacs-lisp
     (use-package groovy-mode
       :ensure)
   #+END_SRC
* TRAMP

  Make sure the remote PATH will be properly set when connecting with
  tramp on SSH:

  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'tramp
      (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
  #+END_SRC

* Elm

  #+BEGIN_SRC emacs-lisp
    (use-package elm-mode
      :ensure
      :init
      (add-to-list 'company-backends 'company-elm)
      (setq elm-format-on-save t))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package flycheck-elm
      :ensure
      :after (elm-mode flycheck)
      :hook (flycheck-mode . flycheck-elm-setup))
  #+END_SRC

* Rust

  #+BEGIN_SRC emacs-lisp
    (use-package rust-mode
      :ensure
      :mode ("\\.rs\\'" . rust-mode))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package lsp-rust
      :ensure
      :after (lsp-mode rust-mode)
      :hook (rust-mode . lsp-rust-enable)
      :config
      (setq lsp-rust-rls-command '("rustup" "run" "nightly" "rls")))
  #+END_SRC

* Vagrant

  #+BEGIN_SRC emacs-lisp
    (use-package vagrant-tramp
      :quelpa (vagrant-tramp
	       :fetcher github
	       :repo "stevenremot/vagrant-tramp"
	       :files ("*.el" ("bin" "bin/vagrant-tramp-ssh"))))
  #+END_SRC

* Local variables

# Local Variables:
# after-save-hook: (org-babel-tangle)
# End:

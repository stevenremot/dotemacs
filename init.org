#+TITLE: Emacs configuration
#+PROPERTY: header-args :tangle ./init.el

* Introduction
  :PROPERTIES:
  :tangle:   no
  :END:

  Here is the source of my Emacs configuration. Create the files by
  running ~org-babel-tangle~ (~C-c C-v t)~ in this file.

* Tasks
** TODO Flow file symbols
** TODO Component skeletons
** TODO Evols rocktl
** TODO Better prettier-eslint
** DONE Org mode \emsp
* Package management
** Initialiaze package

   I want to download packages from [[https://melpa.org/][MELPA]] and [[http://stable.melpa.org/#/][MELPA stable]] too

   #+BEGIN_SRC emacs-lisp
     (require 'package)

     (add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t)
     (add-to-list 'package-archives (cons "melpa-stable" "https://stable.melpa.org/packages/") t)
   #+END_SRC

   The only remaining thing to do is initializing the package manager

   #+BEGIN_SRC emacs-lisp
     (package-initialize)
   #+END_SRC

** use-package

   All my configuration is based on [[https://github.com/jwiegley/use-package][use-package]] and [[https://github.com/quelpa/quelpa][quelpa]]. These
   packages have to be initialized  at the very beginning.

   #+BEGIN_SRC emacs-lisp
     (let ((packages-to-install '(use-package quelpa-use-package)))
       (dolist (package packages-to-install)
         (unless (package-installed-p package)
           (package-refresh-contents)
           (package-install package))))
   #+END_SRC

   Additionally, we will require ~quelpa-use-package~ right now so
   that we don't have to care about that later.

   #+BEGIN_SRC emacs-lisp
     (require 'quelpa-use-package)
   #+END_SRC

* Main script
** Inhibit package-innitialize
   Add a commented call to ~package-initialize~ to inhibit it. We will
   do the call by hand later.

   #+BEGIN_SRC emacs-lisp
     ; (package-initialize)
   #+END_SRC

** Global variables

   These are commonn useful variables for getting the emacs init dir
   and the path to my personal local packages.

   #+BEGIN_SRC emacs-lisp
     (defconst my-init-dir (file-name-directory (or load-file-name (buffer-file-name))))
     (defconst my-site-lisp (concat my-init-dir "site-lisp/"))
   #+END_SRC

   ~my-site-lisp~ should be added to ~load-path~ as it contains packages.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path my-site-lisp)
   #+END_SRC

** Custom configuration

   Move the custom configurationn file outside of the init file to
   avoid blending custom configuration with the init sources.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (concat my-init-dir "custom-file.el"))
     (load custom-file 'no-error)
   #+END_SRC

** Load the initialization modules

   Load the sources present in the init/ directory:

   #+NAME: init-modules
   - elpa
   - exec-path-from-shell
   - prompt
   - theme
   - neotree
   - ivy
   - shell
   - ag
   - editing
   - git
   - project
   - auto-completion
   - code-checking
   - lsp
   - rocktl
   - emacs-lisp
   - web
   - javascript
   - prettier
   - cucumber
   - markdown
   - yaml
   - android
   - ocaml
   - docker
   - php
   - redmine

   #+BEGIN_SRC emacs-lisp :var modules=init-modules
     (defun my-load-init-file (file)
       "Load one initialization file.

     FILE is the name of the file without extension and directory."
       (load (concat my-init-dir "init/" file ".el")))

     (mapc #'my-load-init-file modules)
   #+END_SRC
* Navigation

** imenu

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c i") #'imenu)
   #+END_SRC
* Org mode
** Basic configuration
*** Clock table indentation

    The org clock table indents its entries using the LateX symbol
    ~\emsp~, which renders badly in org buffers. I override it with my
    own indent function extracted from [[https://emacs.stackexchange.com/questions/9528/is-it-possible-to-remove-emsp-from-clock-report-but-preserve-indentation][a stackexchange discussion]].

    #+BEGIN_SRC emacs-lisp
      (defun my/org-clocktable-indent-string (level)
        (if (= level 1)
            ""
          (let ((str "+"))
            (while (> level 2)
              (setq level (1- level)
                    str (concat str "--")))
            (concat str "-> "))))
    #+END_SRC

*** Org initialization

    #+BEGIN_SRC emacs-lisp
      (defun my/init-org ()
        ;; Override clock table ident function with mine
        (advice-add 'org-clocktable-indent-string :override #'my/org-clocktable-indent-string)

        ;; Automatically add syntax coloration on org src blocks
        (setq org-src-fontify-natively t))

    #+END_SRC

*** Package declaration

   #+BEGIN_SRC emacs-lisp
     (use-package org
       :bind (("C-c o t" . org-todo-list))
       :init (my/init-org))
   #+END_SRC

** Agenda

   #+BEGIN_SRC emacs-lisp
     (use-package org-agenda
       :bind (("C-c o a" . org-agenda-list)))
   #+END_SRC

** Clock

   #+BEGIN_SRC emacs-lisp
     (use-package org-clock
       :bind (("C-c o j" . org-clock-jump-to-current-clock)))
   #+END_SRC

* Local variables

# Local Variables:
# after-save-hook: (org-babel-tangle)
# End:

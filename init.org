#+TITLE: Emacs init startup

* Directories

  These are the directories commonly used in startup scripts.

  - ~my-confdir~ refers to the directory in which emacs initialization
    starts.
  - ~my-init-dir~ is the directory in which the initialization modules
    are defined.

    #+BEGIN_SRC emacs-lisp
      (defconst my-confdir (file-name-directory (or buffer-file-name load-file-name)))
      (defconst my-init-dir (concat my-confdir "init/"))
    #+END_SRC

* Org helpers

  I define in this section some useful functions to make my lisp code
  interact with Org elements.

** Key shortcuts

   This first function takes a table describing key bindings as
   argument, and register them as global key bindings.

   #+BEGIN_SRC emacs-lisp
(defun my-set-global-keys-from-org-table (table)
  "Register global key bindings defined in TABLE.

TABLE is an Org table in this format:

| Key | Command     |
|-----+-------------|
| M-x | my-function |
| ... | ...         |"
  (dolist (line (cdr table))
    (when (listp line)
      (global-set-key (kbd (car line)) (intern (cadr line))))))
   #+END_SRC

   This second function does the same for local keymaps.

   #+BEGIN_SRC emacs-lisp
(defun my-set-local-keys-from-org-table (keymap table)
  "Register local key bindings for KEYMAP defined in TABLE.

TABLE is an Org table in this format:

| Key | Command     |
|-----+-------------|
| M-x | my-function |
| ... | ...         |"
  (dolist (line (cdr table))
    (when (listp line)
      (define-key keymap (kbd (car line)) (intern (cadr line))))))
   #+END_SRC

   #+RESULTS:
   : my-set-local-keys-from-org-table

* Initialisation modules

   I split my configuration in different modules so that I can enable /
   disable one at will.

   A module is either a =*.el= or =*.org= file placed in
   ~my-init-dir~. However, only Emacs Lisp files will be loaded, org
   files need to be tangled. See [[Compilation]] for more information.

** Modules listing

   These are all the modules. The modules with checked boxes will be
   loaded.

   #+name: modules-list
   - [X] custom
   - [X] cedet
   - [X] cedet-contrib
   - [X] package
   - [X] theme
   - [ ] edep
   - [X] ergo
   - [ ] helm
   - [X] ivy
   - [X] org
   - [X] jabber
   - [X] gtags
   - [X] flycheck
   - [X] company
   - [X] project
   - [X] eldoc
   - [ ] typescript
   - [X] web
   - [X] php
   - [X] hoa
   - [X] sql
   - [ ] clojure
   - [X] lisp
   - [X] tlsd
   - [X] haskell
   - [X] yasnippet
   - [X] local

   These modules will be registered in ~my-enabled-modules~.

   #+BEGIN_SRC emacs-lisp
     (defconst my-enabled-modules '())
   #+END_SRC

   This piece of code extracts the enabled modules from the list and
   put them in the ~my-enabled-modules~ variable.

   #+BEGIN_SRC emacs-lisp :var modules-list=modules-list
     (dolist (item modules-list)
       (when (equal (string-match (rx "[CBON] ") item) 0)
         (push (substring item 7) my-enabled-modules)))

     (setq my-enabled-modules (reverse my-enabled-modules))
   #+END_SRC

** Loading modules

   This function loads the Emacs lisp sources for the provided module.

   #+BEGIN_SRC emacs-lisp
     (defun my-load-module (module)
       (load (concat my-init-dir module)))
   #+END_SRC

   With the previous helper functions, the code to load each enabled
   module is pretty straightforward:

   #+BEGIN_SRC emacs-lisp
     (mapc #'my-load-module my-enabled-modules)
   #+END_SRC

* Compilation

  In order to avoid loading Org on initialization, I compile Org
  sources to Emacs lisp. This has been inspired by [[https://ryuslash.org/dotfiles/emacs/init.html][this nice emacs
  conf]]. Here is the makefile :

  #+BEGIN_SRC makefile :tangle Makefile
MODULES = $(wildcard init/*.org)

init.el: init.org
	emacs -Q -batch -l "ob-tangle" -eval "(progn (setq org-src-preserve-indentation t) (org-babel-tangle-file \"$<\" \"$(notdir $@)\"))"

init/%.el: init/%.org
	emacs -Q -batch -l "ob-tangle" -eval "(org-babel-tangle-file \"$<\" \"$(notdir $@)\")"

all: init.el $(MODULES:.org=.el)
  #+END_SRC

  To launch compilation from Emacs, use this function:

  #+BEGIN_SRC emacs-lisp
    (defun my-compile-init-files ()
      (interactive)
      (let ((default-directory my-confdir))
        (async-shell-command "make all")))
  #+END_SRC

# Local Variables:
# org-src-preserve-indentation: t
# End:

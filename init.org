#+TITLE: Emacs configuration
#+PROPERTY: header-args :tangle ./init.el

* Introduction
  :PROPERTIES:
  :tangle:   no
  :END:

  Here is the source of my Emacs configuration. Create the files by
  running ~org-babel-tangle~ (~C-c C-v t)~ in this file.

* Tasks
** TODO Flow file symbols
** TODO Component skeletons
** TODO Evols rocktl
** TODO Better prettier-eslint
** DONE Org mode \emsp
* Package management
** Initialiaze package

   I want to download packages from [[https://melpa.org/][MELPA]] and [[http://stable.melpa.org/#/][MELPA stable]] too

   #+BEGIN_SRC emacs-lisp
     (require 'package)

     (add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t)
     (add-to-list 'package-archives (cons "melpa-stable" "https://stable.melpa.org/packages/") t)
   #+END_SRC

   The only remaining thing to do is initializing the package manager

   #+BEGIN_SRC emacs-lisp
     (package-initialize)
   #+END_SRC

** use-package

   All my configuration is based on [[https://github.com/jwiegley/use-package][use-package]] and [[https://github.com/quelpa/quelpa][quelpa]]. These
   packages have to be initialized  at the very beginning.

   #+BEGIN_SRC emacs-lisp
     (let ((packages-to-install '(use-package quelpa-use-package)))
       (dolist (package packages-to-install)
         (unless (package-installed-p package)
           (package-refresh-contents)
           (package-install package))))
   #+END_SRC

   Additionally, we will require ~quelpa-use-package~ right now so
   that we don't have to care about that later.

   #+BEGIN_SRC emacs-lisp
     (require 'quelpa-use-package)
   #+END_SRC

** Backups

   elpa-backup is a personal package located at [[file:site-lisp/elpa-backup.el][site-lisp/elpa-backup.el]]

   It has 2 commands:
   - ~elpa-backup-do~, to create a snapshot of the ~elpa~ directory
   - ~elpa-backup-rollback~, to replace the current ~elpa~ directory
     with the snapshot

   Running ~elpa-backup-do~ before an update ensures I can come back
   to a working state if something goes wrong.

   #+BEGIN_SRC emacs-lisp
     (use-package elpa-backup
       :commands (elpa-backup-do elpa-backup-rollback))
   #+END_SRC

* Main script
** Inhibit package-innitialize
   Add a commented call to ~package-initialize~ to inhibit it. We will
   do the call by hand later.

   #+BEGIN_SRC emacs-lisp
     ; (package-initialize)
   #+END_SRC

** Global variables

   These are commonn useful variables for getting the emacs init dir
   and the path to my personal local packages.

   #+BEGIN_SRC emacs-lisp
     (defconst my-init-dir (file-name-directory (or load-file-name (buffer-file-name))))
     (defconst my-site-lisp (concat my-init-dir "site-lisp/"))
   #+END_SRC

   ~my-site-lisp~ should be added to ~load-path~ as it contains packages.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path my-site-lisp)
   #+END_SRC

** Custom configuration

   Move the custom configurationn file outside of the init file to
   avoid blending custom configuration with the init sources.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (concat my-init-dir "custom-file.el"))
     (load custom-file 'no-error)
   #+END_SRC

** Load the initialization modules

   Load the sources present in the init/ directory:

   #+NAME: init-modules
   - exec-path-from-shell
   - prompt
   - theme
   - ivy
   - shell
   - ag
   - editing
   - git
   - project
   - auto-completion
   - code-checking
   - lsp
   - rocktl
   - emacs-lisp
   - web
   - javascript
   - prettier
   - cucumber

   #+BEGIN_SRC emacs-lisp :var modules=init-modules
     (defun my-load-init-file (file)
       "Load one initialization file.

     FILE is the name of the file without extension and directory."
       (load (concat my-init-dir "init/" file ".el")))

     (mapc #'my-load-init-file modules)
   #+END_SRC
* Navigation
** imenu

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c i") #'imenu)
   #+END_SRC
** neotree

   Package for seeing a file hierarchy as a file tree.

   In order for our selected theme to work, we have to load ~all-the-icons~;

   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :ensure)
   #+END_SRC

   Then we can setup neotree with the right theme.

   #+BEGIN_SRC emacs-lisp
     (use-package neotree
       :ensure
       :custom
       (neo-theme 'icons)
       ; Try to select the current file at opening
       (neo-smart-open t))
   #+END_SRC

   #+RESULTS:

* Org mode
** Basic configuration
*** Clock table indentation

    The org clock table indents its entries using the LateX symbol
    ~\emsp~, which renders badly in org buffers. I override it with my
    own indent function extracted from [[https://emacs.stackexchange.com/questions/9528/is-it-possible-to-remove-emsp-from-clock-report-but-preserve-indentation][a stackexchange discussion]].

    #+BEGIN_SRC emacs-lisp
      (defun my/org-clocktable-indent-string (level)
        (if (= level 1)
            ""
          (let ((str "+"))
            (while (> level 2)
              (setq level (1- level)
                    str (concat str "--")))
            (concat str "-> "))))
    #+END_SRC

*** Org initialization

    #+BEGIN_SRC emacs-lisp
      (defun my/init-org ()
        ;; Override clock table ident function with mine
        (advice-add 'org-clocktable-indent-string :override #'my/org-clocktable-indent-string)

        ;; Automatically add syntax coloration on org src blocks
        (setq org-src-fontify-natively t))

    #+END_SRC

*** Package declaration

   #+BEGIN_SRC emacs-lisp
     (use-package org
       :bind (("C-c o t" . org-todo-list))
       :init (my/init-org))
   #+END_SRC

** Agenda

   #+BEGIN_SRC emacs-lisp
     (use-package org-agenda
       :bind (("C-c o a" . org-agenda-list)))
   #+END_SRC

** Clock

   #+BEGIN_SRC emacs-lisp
     (use-package org-clock
       :bind (("C-c o j" . org-clock-jump-to-current-clock)))
   #+END_SRC
* Redmine

  Here are some tools to interact with a redmine projet.

** Configuration

   #+BEGIN_SRC emacs-lisp
     (defgroup my-redmine () "Redmine tools" :group 'tools)

     (defcustom my-redmine/repo-url ""
       "Repository URL."
       :type 'string
       :group 'my-redmine)
   #+END_SRC

** Opening the issue at point

   This is a function to open the issue number at point in a web
   browser.

   #+BEGIN_SRC emacs-lisp
     (defun my-redmine/browse-issue (issue-number)
       "Visit the URL corresponding to the given ISSUE-NUMBER."
       (browse-url (format "%s/issues/%s" my-redmine/repo-url issue-number)))

     (defun my-redmine/browse-issue-at-point (issue-number)
       "Visit the URL corresponding to the ISSUE-NUMBER at point."
       (interactive (list (number-to-string (thing-at-point 'number))))
       (my-redmine/browse-issue issue-number))

     (global-set-key (kbd "C-c r j") #'my-redmine/browse-issue-at-point)
   #+END_SRC
* PHP
** php-mode

   #+BEGIN_SRC emacs-lisp
     (use-package php-mode
       :ensure
       :mode "\\.php\\'")
   #+END_SRC

** lsp-php

   This package requires [[https://github.com/felixfbecker/php-language-server][php-language-server]] to work. Follow the
   instructions on the readme to do so.

   #+BEGIN_SRC emacs-lisp
     (use-package lsp-php
       :ensure
       :hook ((php-mode . lsp-php-enable)))
   #+END_SRC
* Docker

** dockerfile-mode

   #+BEGIN_SRC emacs-lisp
     (use-package dockerfile-mode
       :ensure)
   #+END_SRC

** docker

   #+BEGIN_SRC emacs-lisp
     (use-package docker
       :ensure)
   #+END_SRC
* Ocaml / Reason
** Tuareg

   This is the major mode to edit Ocaml buffers.

   #+BEGIN_SRC emacs-lisp
     (use-package tuareg
       :ensure
       :mode ("\\.ml\\'" . tuareg-mode))
   #+END_SRC

** Reason mode

   ~reason-mode~ has a nice auto-formatting feature we can trigger
   before saving a buffer.

   #+BEGIN_SRC emacs-lisp
     (defun init/setup-reason-buffer ()
       "Setup a buffer for working with reason."
       (add-hook 'before-save-hook #'refmt-before-save))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package reason-mode
       :ensure
       :hook ((reason-mode . init/setup-reason-buffer))
       :mode ("\\.re\\'" . reason-mode))
   #+END_SRC

** LSP

   This package require [[https://github.com/freebroccolo/ocaml-language-server][ocaml-langauge-server]] to be installed. That
   can be done by running:

   #+BEGIN_SRC sh :tangle no
     npm install -g ocaml-language-server
   #+END_SRC

   ~lsp-ocaml~ supports both ocaml and reason files.

   #+BEGIN_SRC emacs-lisp
     (use-package lsp-ocaml
       :ensure
       :init
       (with-eval-after-load 'lsp-ui-flycheck
         (lsp-ui-flycheck-add-mode 'tuareg-mode)
         (lsp-ui-flycheck-add-mode 'reason-mode))
       :hook ((tuareg-mode . lsp-ocaml-enable)
              (reason-mode . lsp-ocaml-enable)))
   #+END_SRC
* Markdown

  #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
      :ensure)
  #+END_SRC

* YAML

  #+BEGIN_SRC emacs-lisp
    (use-package yaml-mode
      :ensure)
  #+END_SRC

* Android
** Groovy

   This is useful for editing gradle files.

   #+BEGIN_SRC emacs-lisp
     (use-package groovy-mode
       :ensure)
   #+END_SRC
* TRAMP

  Make sure the remote PATH will be properly set when connecting with
  tramp on SSH:

  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'tramp
      (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
  #+END_SRC

* Local variables

# Local Variables:
# after-save-hook: (org-babel-tangle)
# End:

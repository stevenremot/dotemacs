#+title: Theme setup

* Powerline

  Currently disabled, I am switching to a custom mode line
  configuration. See [[Mode%20line][Mode line]] section to see the new configuration.

** Custom theme

  I use a slightly tuned powerline theme.

  #+BEGIN_SRC emacs-lisp
    (defun my-powerline-theme ()
      "Setup the default mode-line."
      (interactive)
      (setq-default mode-line-format
                    '("%e"
                      (:eval
                       (let* ((active (powerline-selected-window-active))
                              (mode-line (if active 'mode-line 'mode-line-inactive))
                              (face1 (if active 'powerline-active1 'powerline-inactive1))
                              (face2 (if active 'powerline-active2 'powerline-inactive2))
                              (separator-left (intern (format "powerline-%s-%s"
                                                              powerline-default-separator
                                                              (car powerline-default-separator-dir))))
                              (separator-right (intern (format "powerline-%s-%s"
                                                               powerline-default-separator
                                                               (cdr powerline-default-separator-dir))))
                              (lhs (list (powerline-raw "%*" nil 'l)
                                         (powerline-raw mode-line-mule-info nil 'l)
                                         (powerline-buffer-id nil 'l)
                                         (powerline-raw " ")
                                         (funcall separator-left mode-line face1)
                                         (when (boundp 'erc-modified-channels-object)
                                           (powerline-raw erc-modified-channels-object face1 'l))
                                         ;; Lines
                                         (powerline-raw "%4l" face1 'l)
                                         (powerline-raw ":" face1 'l)
                                         (powerline-raw "%3c" face1 'r)
                                         (powerline-raw "[%3p]" face1 'l)
                                         ;; End lines
                                         (powerline-narrow face1 'l)
                                         (powerline-raw " " face1)
                                         (funcall separator-left face1 face2)
                                         (powerline-vc face2 'r)))
                              (rhs (list (powerline-raw global-mode-string face2 'r)
                                         (funcall separator-right face2 face1)
                                         ;; Modes
                                         (powerline-major-mode face1 'l)
                                         (powerline-process face1)
                                         (powerline-minor-modes face1 'l)
                                         ;; End modes
                                         (funcall separator-right face1 mode-line)
                                         (powerline-hud face2 face1))))
                         (concat (powerline-render lhs)
                                 (powerline-fill face2 (powerline-width rhs))
                                 (powerline-render rhs)))))))
  #+END_SRC

** Setup

   #+BEGIN_SRC emacs-lisp
     ;; (use-package powerline
     ;;  :ensure powerline
     ;;  :init (my-powerline-theme))
   #+END_SRC

* Mode line
** Faces

   A basic color theme for the mode line.

   #+BEGIN_SRC emacs-lisp
     (defun my-mode-line-color-theme ()
       "Define a color theme for the mode line."
       (interactive)
       (custom-set-faces
        '(mode-line
          ((((class color))
            :background "black" :foreground "Gainsboro" :family "Calibri" :height 0.8)))

        '(mode-line-inactive
          ((((class color))
            :background "DimGray" :family "Calibri" :height 0.8)))

        '(mode-line-buffer-id
          ((((class color))
            :background nil :foreground nil :font-family nil :weight bold)))))

   #+END_SRC

** Widgets

   These are custom widgets for setting up the mode line.


*** File status

    This widget gives information on the status of a file using a color code :

    - Dark green: Buffer is readable and in sync with the file
    - Light green: Buffer is readable and modified since
    - Grey: Buffer is read-only

    When the file has been modified outside of Emacs, an exclamation
    mark if shown.

    #+BEGIN_SRC emacs-lisp
      (defface my-mode-line-file-status-default
        '((((class color))
           :background "#002000"
           :weight bold
           :family "Inconsolata"
           :inherit mode-line))
        "Face for a writable not modified file status mode line.")

      (defface my-mode-line-file-status-modified
          '((((class color))
             :background "#006000"
             :weight bold
           :family "Inconsolata"
             :inherit mode-line))
          "Face for a modified buffer file status mode line.")

      (defface my-mode-line-file-status-read-only
        '((((class color))
           :background "#202020"
           :weight bold
           :family "Inconsolata"
           :inherit mode-line))
        "Face for a read-only buffer")

      (defvar my-mode-line-file-status
        '(:eval
          (let ((face (cond
                       ((buffer-modified-p)
                        (quote my-mode-line-file-status-modified))
                       (buffer-read-only
                        (quote my-mode-line-file-status-read-only))
                       (t
                        (quote my-mode-line-file-status-default))))
                (text (if (verify-visited-file-modtime)
                          "   "
                        " ! ")))
            (propertize text
                        (quote face) face))))
    #+END_SRC

** Organization

   Here is the mode-line specification.

   #+BEGIN_SRC emacs-lisp
     (defun my-setup-mode-line-format ()
       "Change mode-line-format to my personal setup."
       (interactive)
       (setq-default mode-line-format
             `("%e"
               ,my-mode-line-file-status
               mode-line-frame-identification
               mode-line-buffer-identification
               "   "
               mode-line-position
               (vc-mode vc-mode)
               "  "
               mode-line-modes
               mode-line-misc-info
               mode-line-end-spaces)))
   #+END_SRC

** Setup function

   This function setup the theme and the layout.

   #+BEGIN_SRC emacs-lisp
     (defun my-setup-mode-line ()
       "Setup my mode line theme and format."
       (interactive)
       (my-mode-line-color-theme)
       (my-setup-mode-line-format))
   #+END_SRC

* Moe theme

  Moe, moe, kyun!

  Moe colors are nice for powerline, but I still want my powerline
  layout, so I call =my-powerline-theme= again.

  #+BEGIN_SRC emacs-lisp
    (use-package moe-theme
      :ensure
      :config (progn
                (moe-dark)
                (my-setup-mode-line)))
  #+END_SRC
